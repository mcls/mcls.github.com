<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/mcls]]></title>
  <link href="http://mcls.github.com/mcls/atom.xml" rel="self"/>
  <link href="http://mcls.github.com/mcls/"/>
  <updated>2012-10-24T22:28:35+02:00</updated>
  <id>http://mcls.github.com/mcls/</id>
  <author>
    <name><![CDATA[Maarten Claes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FQL RubyGem]]></title>
    <link href="http://mcls.github.com/mcls/blog/2012/10/24/fql-rubygem/"/>
    <updated>2012-10-24T21:44:00+02:00</updated>
    <id>http://mcls.github.com/mcls/blog/2012/10/24/fql-rubygem</id>
    <content type="html"><![CDATA[<p>The Facebook Query Language allows you to write SQL-like queries to fetch data
from the Graph API. I&#8217;ve written a simple gem named <code>fql</code> to simplify this in
ruby.</p>

<p>First of all install the gem by adding <code>gem 'fql'</code> to your <code>Gemfile</code>.</p>

<p>Now you can simply use the FQL queries like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fql</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT first_name, last_name FROM user WHERE uid = 4&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it will return the matching records as an array of hashes:</p>

<figure class='code'><figcaption><span>Single query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span><span class="p">{</span><span class="s2">&quot;first_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="s2">&quot;last_name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Zuckerberg&quot;</span><span class="p">}</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using an access token</h3>

<p>To access some resources you&#8217;ll need to have a valid access token.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fql</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT first_name, last_name FROM user WHERE uid = me()&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:access_token</span> <span class="o">=&gt;</span> <span class="s1">&#39;abc1234567&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using a multi-query</h3>

<p>If you want to use multi-queries then just pass in a Hash instead of a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fql</span><span class="o">.</span><span class="n">execute</span><span class="p">({</span>
</span><span class='line'>  <span class="s2">&quot;query1&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;SELECT uid, rsvp_status FROM event_member WHERE eid = 209798352393506 LIMIT 3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;query2&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;SELECT name FROM user WHERE uid IN (SELECT uid FROM #query1)&quot;</span>
</span><span class='line'><span class="p">},</span> <span class="ss">:access_token</span> <span class="o">=&gt;</span> <span class="s2">&quot;abc1234567&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the result will be a bit different from that of a single query. It
will still return an array of hashes, but this time the hashes will have a
<code>name</code> and <code>fql_result_set</code> key. <br/>
The <code>name</code> is the name of the subquery and <code>fql_result_set</code> will contains the
results for that particular query.</p>

<figure class='code'><figcaption><span>Multi-query result example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;query1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fql_result_set&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="s2">&quot;uid&quot;</span><span class="o">=&gt;</span><span class="mi">712638919</span><span class="p">,</span> <span class="s2">&quot;rsvp_status&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;attending&quot;</span><span class="p">},</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;query2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fql_result_set&quot;</span><span class="o">=&gt;[</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Srikanth Nagandla&quot;</span><span class="p">},</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information on how the use FQL you can check out the
<a href="https://developers.facebook.com/docs/reference/fql/">official developer documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing commits in git]]></title>
    <link href="http://mcls.github.com/mcls/blog/2012/08/07/fixing-commits-in-git/"/>
    <updated>2012-08-07T22:46:00+02:00</updated>
    <id>http://mcls.github.com/mcls/blog/2012/08/07/fixing-commits-in-git</id>
    <content type="html"><![CDATA[<p>You can fix your last commit in git by doing <code>git commit --amend</code>. For example,
if you had a typo in your last commit message you could correct it by doing:</p>

<figure class='code'><figcaption><span>Fixing a typo with &#8211;amend</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Oops, a typo&quot;</span>
</span><span class='line'><span class="nv">$ </span>git log --oneline
</span><span class='line'>9e29e33 Oops, a typo
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git commit --amend -m <span class="s2">&quot;New commit message without typos&quot;</span>
</span><span class='line'><span class="nv">$ </span>git log --oneline
</span><span class='line'>aa7faf2 New commit message without typos
</span></code></pre></td></tr></table></div></figure>


<p>The previous commit will be replaced by the new one, which is based on the
current contents of the index. For clarity, I&#8217;ll add that the git index is the
staging area, also known as everything that is currently being tracked by git.
So if you forgot to add some file to the index in the last commit, you could do:</p>

<figure class='code'><figcaption><span>Adding a file </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;Made some changes&quot;</span> <span class="c"># Forgot to add forgotten-file.txt</span>
</span><span class='line'><span class="nv">$ </span>git add forgotten-file.txt
</span><span class='line'><span class="nv">$ </span>git commit --amend -m <span class="s2">&quot;Made some changes and added forgotten-file.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Already pushed the commit?</h3>

<p>If you&#8217;ve already pushed your faulty commit then it&#8217;s also best to first do
something like: <code>git push -f origin HEAD^:master</code>. Pushing your HEAD at the
previous commit and then doing the amend will prevent you from having to do a
pull &amp; merge just to fix something small like a typo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;Typo&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push
</span><span class='line'><span class="nv">$ </span><span class="c"># Realize you had a typo, so push again but send HEAD^ upstream </span>
</span><span class='line'><span class="nv">$ </span><span class="c"># ( HEAD^ means the HEAD at the previous commit )</span>
</span><span class='line'><span class="nv">$ </span>git push -f origin HEAD^:master
</span><span class='line'><span class="nv">$ </span>git commit --amend -m <span class="s2">&quot;Fixed Typo&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push <span class="c"># No pull or merge needed</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Documentation</h4>

<p>Lastly here&#8217;s the <code>--amend</code> option documentation from the <a href="http://linux.die.net/man/1/git-commit">git-commit man page</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--amend
</span><span class='line'>    Used to amend the tip of the current branch. Prepare the tree object you would want to replace
</span><span class='line'>    the latest commit as usual <span class="o">(</span>this includes the usual -i/-o and explicit paths<span class="o">)</span>, and the commit
</span><span class='line'>    log editor is seeded with the commit message from the tip of the current branch. The commit
</span><span class='line'>    you create replaces the current tip - <span class="k">if </span>it was a merge, it will have the parents of the
</span><span class='line'>    current tip as parents - so the current top commit is discarded.
</span><span class='line'>    It is a rough equivalent <span class="k">for</span>:
</span><span class='line'>
</span><span class='line'>        <span class="nv">$ </span>git reset --soft HEAD^
</span><span class='line'>        <span class="nv">$ </span>... <span class="k">do </span>something <span class="k">else </span>to come up with the right tree ...
</span><span class='line'>        <span class="nv">$ </span>git commit -c ORIG_HEAD
</span><span class='line'>
</span><span class='line'>    but can be used to amend a merge commit.
</span><span class='line'>    You should understand the implications of rewriting <span class="nb">history </span><span class="k">if </span>you amend a commit that has
</span><span class='line'>    already been published. <span class="o">(</span>See the <span class="s2">&quot;RECOVERING FROM UPSTREAM REBASE&quot;</span> section in git-rebase<span class="o">(</span>1<span class="o">)</span>.<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PEAR, PHPUnit and MAMP]]></title>
    <link href="http://mcls.github.com/mcls/blog/2012/08/07/pear-phpunit-and-markdown/"/>
    <updated>2012-08-07T22:30:00+02:00</updated>
    <id>http://mcls.github.com/mcls/blog/2012/08/07/pear-phpunit-and-markdown</id>
    <content type="html"><![CDATA[<h3>The problem I had</h3>

<p>When I had initially installed PEAR I just used it&#8217;s suggested paths and didn&#8217;t
think it would be any problem. I could install phpunit and use it from the
command line. But when I wanted to configure NetBeans to use PHPUnit I got the
following error:</p>

<p><code>Selected PHPUnit (version ?.?.?) is too old, upgrade it if possible (the
minimum version in 3.3.0).</code></p>

<p>After reading some posts, trying to fix it through editing all the php.ini&#8217;s,
reinstalling PHPUnit, &#8230; I still kept on getting errors. Finally I decided to
take the time to restart from scratch and make sure all php related stuff would
be kept in the MAMP directories so that in the future problems like this would
be easier to solve. I removed the old php, phpunit, pear, &#8230; binaries from
<code>/usr/local/bin</code> and replaced them by symlinks to the ones in the MAMP directory.</p>

<p>This tutorials shows how I installed PEAR and PHPUnit from scratch.</p>

<h3>Installing PEAR for MAMP</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /Applications/MAMP/bin/php/php5.3/
</span><span class='line'>curl -O http://pear.php.net/go-pear.phar
</span><span class='line'>./bin/php ./go-pear.phar </span></code></pre></td></tr></table></div></figure>


<p>Now pear will suggest a file layout for you, <em>but it will try to put everything
in your home directory, while most of it should be in your MAMP folder</em>.
The following is the correct layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 1. Installation base ($prefix)                   : /Applications/MAMP/bin/php5.3
</span><span class='line'> 2. Temporary directory for processing            : /tmp/pear/install
</span><span class='line'> 3. Temporary directory for downloads             : /tmp/pear/install
</span><span class='line'> 4. Binaries directory                            : /Applications/MAMP/bin/php5.3/bin
</span><span class='line'> 5. PHP code directory ($php_dir)                 : /Applications/MAMP/bin/php5.3/lib/php
</span><span class='line'> 6. Documentation directory                       : /Applications/MAMP/bin/php5.3/lib/php/doc
</span><span class='line'> 7. Data directory                                : /Applications/MAMP/bin/php5.3/lib/php/data
</span><span class='line'> 8. User-modifiable configuration files directory : /Applications/MAMP/bin/php5.3/conf
</span><span class='line'> 9. Public Web Files directory                    : /Applications/MAMP/htdocs
</span><span class='line'>10. Tests directory                               : /Applications/MAMP/bin/php5.3/lib/php/tests
</span><span class='line'>11. Name of configuration file                    : /Users/yourusername/.pearrc</span></code></pre></td></tr></table></div></figure>


<p>Of course the <code>php5.3/</code> and <code>username/</code> could be different for you.
By setting the paths this way all PEAR packages will automatically land inside
the standard PHP <code>include_path</code> of MAMP.</p>

<p>Now let&#8217;s go to <code>/usr/local/bin</code> and create a symlink to the pear command in
your MAMP directory. This is an easy way to make sure it&#8217;s in you <code>PATH</code>,
allowing you to be able to just type <code>pear</code> to use it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/local/bin
</span><span class='line'>ln -s /Applications/MAMP/bin/php5.3/bin/pear</span></code></pre></td></tr></table></div></figure>


<p>If you want to you can repeat this for <code>php</code>, <code>phpunit</code> and the others too.</p>

<h3>Installing PHPUnit</h3>

<p>Now that we have PEAR installed installing PHPUnit is easy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pear channel-discover pear.phpunit.de
</span><span class='line'>sudo pear install --alldeps phpunit/PHPUnit</span></code></pre></td></tr></table></div></figure>


<p>Starting from PHPUnit 3.6.8 the functionality behind &#8220;phpunit &#8211;skeleton-class&#8221;
and &#8220;phpunit &#8211;skeleton-test&#8221; is marked as deprecated and it&#8217;s going to be
removed in 3.7. So it&#8217;s best to install <code>phpunit-skelgen</code> too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pear install phpunit/PHPUnit_SkeletonGenerator</span></code></pre></td></tr></table></div></figure>


<p>Having now installed PEAR and PHPUnit properly, you should be able to easily
configure NetBeans for use with PHPUnit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POJO binding and JPA's orphanRemoval in Play]]></title>
    <link href="http://mcls.github.com/mcls/blog/2012/08/07/pojo-binding-and-jpas-orphanremoval-in-play/"/>
    <updated>2012-08-07T22:14:00+02:00</updated>
    <id>http://mcls.github.com/mcls/blog/2012/08/07/pojo-binding-and-jpas-orphanremoval-in-play</id>
    <content type="html"><![CDATA[<p>The <code>orphanRemoval</code> property allows you to easily manage <code>OneToMany</code> and
<code>OneToOne</code> relationships. If a relationship has <code>orphanRemoval</code> set to true,
then whenever a child is removed from the parent entity it will also be deleted
from the database.</p>

<p>But when used in combination with
<a href="http://www.playframework.org/documentation/1.2.4/controllers#pojo">Play&#8217;s POJO binding</a>,
it can cause some unexpected errors. Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parent</span> <span class="kd">extends</span> <span class="n">Model</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span><span class="o">=</span><span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orphanRemoval</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Child</span><span class="o">&gt;</span> <span class="n">childs</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our Controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">ParentController</span> <span class="kd">extends</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Parent</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">parent</span><span class="o">.</span><span class="na">merge</span><span class="o">();</span>
</span><span class='line'>    <span class="n">parent</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>    <span class="n">render</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will throw the following exception:
<code>PersistenceException occured : org.hibernate.HibernateException: A collection
with cascade="all-delete-orphan" was no longer referenced by the owning entity
instance: models.Parent.childs</code></p>

<h3>The problem</h3>

<p>To make the <code>orphanRemoval</code> work Hibernate has to keep track of the Collection
that is referencing the childs. When <code>update()</code> is called, the childs List is
assigned a new instance, this is what causes the <code>PersistenceException</code>.</p>

<h3>The solution</h3>

<p>We can easily solve this by providing a setter for <code>childs</code> which will prevent
it from being assigned a new instance. Here is the fixed <code>Parent</code> model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parent</span> <span class="kd">extends</span> <span class="n">Model</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span><span class="o">=</span><span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orphanRemoval</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Child</span><span class="o">&gt;</span> <span class="n">childs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setChilds</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Child</span><span class="o">&gt;</span> <span class="n">newChilds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">childs</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">newChilds</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">childs</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">newChilds</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA: The difference between merge() and persist()]]></title>
    <link href="http://mcls.github.com/mcls/blog/2012/08/07/jpa-the-difference-between-merge-and-persist/"/>
    <updated>2012-08-07T21:30:00+02:00</updated>
    <id>http://mcls.github.com/mcls/blog/2012/08/07/jpa-the-difference-between-merge-and-persist</id>
    <content type="html"><![CDATA[<p>When I started developing in <a href="http://www.playframework.org/">Play! Framework</a>
it was my first time developing in Java and using JPA. I got a bit confused when
I needed to use <code>merge()</code> for the first time so I decided to write a
bit about it to better my understanding of Play! and JPA.</p>

<p>Let&#8217;s look at what the
<a href="http://docs.oracle.com/javaee/5/api/javax/persistence/EntityManager.html">official EntityManager documentation</a>
says first.</p>

<blockquote><h4>merge()</h4>

<p><code>&lt;T&gt; T merge(T entity)</code><br/>
Merge the state of the given entity into the current persistence context.</p>

<h4>persist()</h4>

<p><code>void persist(Object entity)</code><br/>
Make an entity instance managed and persistent.</p></blockquote>

<h2>The difference</h2>

<p>As the documentation says <code>persist()</code> will make the entity instance managed and
persistent, while <code>merge()</code> will just merge the state into the current
persistence context. What this means is that both methods will add the entity
to the persistence context, but <code>persist()</code> will also make the entity managed
so that changes after the <code>persist()</code> call will also be persisted, whereas
<code>merge()</code> will not do this (although it will return a managed entity instance).</p>

<h2>An example in Play! Framework</h2>

<p>This is where I got confused. I thought calling <code>merge()</code> on my model would be
sufficient, but Play manages JPA a bit differently. In Play! you have to
<a href="http://www.playframework.org/documentation/1.2.4/jpa#save">explicitly save</a> an
object using <code>save()</code>. Play does this because it&#8217;s more intuitive than having
to call <code>refresh()</code> on entities. The <code>save()</code> method will then call <code>persist()</code>
on the entity if needed, this is also why the models in Play don&#8217;t have a
<code>persist()</code> method.</p>

<p>A very basic example (without validation etc.)</p>

<h4>Controller</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Questions</span> <span class="kd">extends</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Question</span> <span class="n">question</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Suppose the question contains some new answers</span>
</span><span class='line'>    <span class="n">question</span><span class="o">.</span><span class="na">merge</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Save! Otherwise the state of the question entity will be refreshed!</span>
</span><span class='line'>    <span class="n">question</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>    <span class="n">render</span><span class="o">(</span><span class="n">question</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Question Entity</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Question</span> <span class="kd">extends</span> <span class="n">Model</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span><span class="o">=</span><span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orphanRemoval</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Answer</span><span class="o">&gt;</span> <span class="n">answers</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Other fields...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="http://blog.xebia.com/2009/03/23/jpa-implementation-patterns-saving-detached-entities/">JPA implementation patterns: saving (detached) entities</a></li>
<li><a href="http://stackoverflow.com/questions/1069992/jpa-entitymanager-why-use-persist-over-merge">Why use persist() over merge()?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
